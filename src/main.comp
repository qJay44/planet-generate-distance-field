#version 460 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(r8ui, binding = 0) readonly  uniform uimage2DArray imageRead;
layout(r8ui, binding = 1) writeonly uniform uimage2DArray imageWrite;

layout(std430, binding = 2) buffer ChangeFlag {
  uint changed;
};

uniform uvec2 passOffset; // Vertical or horizontal generating
uniform uint beta;

void main() {
  ivec3 texCoord = ivec3(gl_GlobalInvocationID);

  uint color = imageLoad(imageRead, texCoord).r;
  uint colorNeighbourA = imageLoad(imageRead, texCoord + ivec3(passOffset, 0)).r;
  uint colorNeighbourB = imageLoad(imageRead, texCoord - ivec3(passOffset, 0)).r;

  colorNeighbourA += beta;
  colorNeighbourB += beta;

  uint newColor = min(min(color, colorNeighbourA), colorNeighbourB);

  if (newColor < color)
    atomicOr(changed, 1);
  else
    newColor = color;

  imageStore(imageWrite, texCoord, uvec4(uvec3(newColor), 255));
}

